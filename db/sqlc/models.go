// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Roles string

const (
	RolesCustomer Roles = "customer"
	RolesEmployee Roles = "employee"
	RolesManage   Roles = "manage"
	RolesCeo      Roles = "ceo"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles `json:"roles"`
	Valid bool  `json:"valid"` // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

type Sex string

const (
	SexFemale Sex = "female"
	SexMale   Sex = "male"
)

func (e *Sex) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Sex(s)
	case string:
		*e = Sex(s)
	default:
		return fmt.Errorf("unsupported scan type for Sex: %T", src)
	}
	return nil
}

type NullSex struct {
	Sex   Sex  `json:"sex"`
	Valid bool `json:"valid"` // Valid is true if Sex is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSex) Scan(value interface{}) error {
	if value == nil {
		ns.Sex, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Sex.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSex) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Sex), nil
}

type Accounts struct {
	Email    string    `json:"email"`
	Password string    `json:"password"`
	Role     NullRoles `json:"role"`
}

type UserActions struct {
	Email     pgtype.Text        `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	LoginAt   pgtype.Timestamptz `json:"login_at"`
	LogoutAt  pgtype.Timestamptz `json:"logout_at"`
}

type UserInfos struct {
	Email    pgtype.Text `json:"email"`
	Name     string      `json:"name"`
	Sex      NullSex     `json:"sex"`
	BirthDay string      `json:"birth_day"`
}
