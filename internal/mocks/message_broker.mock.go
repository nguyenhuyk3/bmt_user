// Code generated by MockGen. DO NOT EDIT.
// Source: message_broker.go
//
// Generated by this command:
//
//	mockgen -source=message_broker.go -destination=../mocks/message_broker.mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMessageBroker is a mock of IMessageBroker interface.
type MockIMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageBrokerMockRecorder
	isgomock struct{}
}

// MockIMessageBrokerMockRecorder is the mock recorder for MockIMessageBroker.
type MockIMessageBrokerMockRecorder struct {
	mock *MockIMessageBroker
}

// NewMockIMessageBroker creates a new mock instance.
func NewMockIMessageBroker(ctrl *gomock.Controller) *MockIMessageBroker {
	mock := &MockIMessageBroker{ctrl: ctrl}
	mock.recorder = &MockIMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageBroker) EXPECT() *MockIMessageBrokerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIMessageBroker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIMessageBrokerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIMessageBroker)(nil).Close))
}

// SendMessage mocks base method.
func (m *MockIMessageBroker) SendMessage(ctx context.Context, topic, key string, message any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, topic, key, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIMessageBrokerMockRecorder) SendMessage(ctx, topic, key, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIMessageBroker)(nil).SendMessage), ctx, topic, key, message)
}
