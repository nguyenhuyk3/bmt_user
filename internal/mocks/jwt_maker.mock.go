// Code generated by MockGen. DO NOT EDIT.
// Source: maker.interface.go
//
// Generated by this command:
//
//	mockgen -source=maker.interface.go -destination=../../../internal/mocks/jwt_maker.mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	jwt "user_service/utils/token/jwt"

	gomock "go.uber.org/mock/gomock"
)

// MockIMaker is a mock of IMaker interface.
type MockIMaker struct {
	ctrl     *gomock.Controller
	recorder *MockIMakerMockRecorder
	isgomock struct{}
}

// MockIMakerMockRecorder is the mock recorder for MockIMaker.
type MockIMakerMockRecorder struct {
	mock *MockIMaker
}

// NewMockIMaker creates a new mock instance.
func NewMockIMaker(ctrl *gomock.Controller) *MockIMaker {
	mock := &MockIMaker{ctrl: ctrl}
	mock.recorder = &MockIMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMaker) EXPECT() *MockIMakerMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockIMaker) CreateAccessToken(email, role string) (string, *jwt.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", email, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*jwt.Payload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockIMakerMockRecorder) CreateAccessToken(email, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockIMaker)(nil).CreateAccessToken), email, role)
}

// CreateRefreshToken mocks base method.
func (m *MockIMaker) CreateRefreshToken(email, role string) (string, *jwt.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", email, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*jwt.Payload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockIMakerMockRecorder) CreateRefreshToken(email, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockIMaker)(nil).CreateRefreshToken), email, role)
}

// RefreshAccessToken mocks base method.
func (m *MockIMaker) RefreshAccessToken(refreshToken string) (string, *jwt.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAccessToken", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*jwt.Payload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshAccessToken indicates an expected call of RefreshAccessToken.
func (mr *MockIMakerMockRecorder) RefreshAccessToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAccessToken", reflect.TypeOf((*MockIMaker)(nil).RefreshAccessToken), refreshToken)
}

// VerifyAccessToken mocks base method.
func (m *MockIMaker) VerifyAccessToken(token string) (*jwt.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccessToken", token)
	ret0, _ := ret[0].(*jwt.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAccessToken indicates an expected call of VerifyAccessToken.
func (mr *MockIMakerMockRecorder) VerifyAccessToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccessToken", reflect.TypeOf((*MockIMaker)(nil).VerifyAccessToken), token)
}

// VerifyRefreshToken mocks base method.
func (m *MockIMaker) VerifyRefreshToken(refreshToken string) (*jwt.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRefreshToken", refreshToken)
	ret0, _ := ret[0].(*jwt.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRefreshToken indicates an expected call of VerifyRefreshToken.
func (mr *MockIMakerMockRecorder) VerifyRefreshToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRefreshToken", reflect.TypeOf((*MockIMaker)(nil).VerifyRefreshToken), refreshToken)
}
