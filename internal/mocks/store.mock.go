// Code generated by MockGen. DO NOT EDIT.
// Source: store.interface.go
//
// Generated by this command:
//
//	mockgen -source=store.interface.go -destination=../../internal/mocks/store.mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	sqlc "user_service/db/sqlc"
	request "user_service/dto/request"

	pgconn "github.com/jackc/pgx/v5/pgconn"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockIStore is a mock of IStore interface.
type MockIStore struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreMockRecorder
	isgomock struct{}
}

// MockIStoreMockRecorder is the mock recorder for MockIStore.
type MockIStoreMockRecorder struct {
	mock *MockIStore
}

// NewMockIStore creates a new mock instance.
func NewMockIStore(ctrl *gomock.Controller) *MockIStore {
	mock := &MockIStore{ctrl: ctrl}
	mock.recorder = &MockIStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStore) EXPECT() *MockIStoreMockRecorder {
	return m.recorder
}

// CheckAccountExistsByEmailAndSource mocks base method.
func (m *MockIStore) CheckAccountExistsByEmailAndSource(ctx context.Context, arg sqlc.CheckAccountExistsByEmailAndSourceParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccountExistsByEmailAndSource", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccountExistsByEmailAndSource indicates an expected call of CheckAccountExistsByEmailAndSource.
func (mr *MockIStoreMockRecorder) CheckAccountExistsByEmailAndSource(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccountExistsByEmailAndSource", reflect.TypeOf((*MockIStore)(nil).CheckAccountExistsByEmailAndSource), ctx, arg)
}

// GetInforByEmail mocks base method.
func (m *MockIStore) GetInforByEmail(ctx context.Context, email pgtype.Text) (sqlc.UserInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInforByEmail", ctx, email)
	ret0, _ := ret[0].(sqlc.UserInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInforByEmail indicates an expected call of GetInforByEmail.
func (mr *MockIStoreMockRecorder) GetInforByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInforByEmail", reflect.TypeOf((*MockIStore)(nil).GetInforByEmail), ctx, email)
}

// GetUserByEmail mocks base method.
func (m *MockIStore) GetUserByEmail(ctx context.Context, email string) (sqlc.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(sqlc.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIStore)(nil).GetUserByEmail), ctx, email)
}

// InsertAccount mocks base method.
func (m *MockIStore) InsertAccount(ctx context.Context, arg sqlc.InsertAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAccount indicates an expected call of InsertAccount.
func (mr *MockIStoreMockRecorder) InsertAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockIStore)(nil).InsertAccount), ctx, arg)
}

// InsertAccountTran mocks base method.
func (m *MockIStore) InsertAccountTran(ctx context.Context, arg request.CompleteRegistrationReq, isFromOAuth2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccountTran", ctx, arg, isFromOAuth2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAccountTran indicates an expected call of InsertAccountTran.
func (mr *MockIStoreMockRecorder) InsertAccountTran(ctx, arg, isFromOAuth2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccountTran", reflect.TypeOf((*MockIStore)(nil).InsertAccountTran), ctx, arg, isFromOAuth2)
}

// InsertOAuth2Action mocks base method.
func (m *MockIStore) InsertOAuth2Action(ctx context.Context, email pgtype.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOAuth2Action", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOAuth2Action indicates an expected call of InsertOAuth2Action.
func (mr *MockIStoreMockRecorder) InsertOAuth2Action(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOAuth2Action", reflect.TypeOf((*MockIStore)(nil).InsertOAuth2Action), ctx, email)
}

// InsertUserAction mocks base method.
func (m *MockIStore) InsertUserAction(ctx context.Context, email pgtype.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserAction", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserAction indicates an expected call of InsertUserAction.
func (mr *MockIStoreMockRecorder) InsertUserAction(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserAction", reflect.TypeOf((*MockIStore)(nil).InsertUserAction), ctx, email)
}

// InsertUserInfo mocks base method.
func (m *MockIStore) InsertUserInfo(ctx context.Context, arg sqlc.InsertUserInfoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserInfo", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserInfo indicates an expected call of InsertUserInfo.
func (mr *MockIStoreMockRecorder) InsertUserInfo(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserInfo", reflect.TypeOf((*MockIStore)(nil).InsertUserInfo), ctx, arg)
}

// UpdateInforByEmail mocks base method.
func (m *MockIStore) UpdateInforByEmail(ctx context.Context, arg sqlc.UpdateInforByEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInforByEmail", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInforByEmail indicates an expected call of UpdateInforByEmail.
func (mr *MockIStoreMockRecorder) UpdateInforByEmail(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInforByEmail", reflect.TypeOf((*MockIStore)(nil).UpdateInforByEmail), ctx, arg)
}

// UpdatePassword mocks base method.
func (m *MockIStore) UpdatePassword(ctx context.Context, arg sqlc.UpdatePasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIStoreMockRecorder) UpdatePassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIStore)(nil).UpdatePassword), ctx, arg)
}

// UpdateUserAction mocks base method.
func (m *MockIStore) UpdateUserAction(ctx context.Context, arg sqlc.UpdateUserActionParams) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAction", ctx, arg)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAction indicates an expected call of UpdateUserAction.
func (mr *MockIStoreMockRecorder) UpdateUserAction(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAction", reflect.TypeOf((*MockIStore)(nil).UpdateUserAction), ctx, arg)
}

// UpdateUserInforTran mocks base method.
func (m *MockIStore) UpdateUserInforTran(ctx context.Context, arg request.ChangeInforReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInforTran", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInforTran indicates an expected call of UpdateUserInforTran.
func (mr *MockIStoreMockRecorder) UpdateUserInforTran(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInforTran", reflect.TypeOf((*MockIStore)(nil).UpdateUserInforTran), ctx, arg)
}
