// Code generated by MockGen. DO NOT EDIT.
// Source: redis.go
//
// Generated by this command:
//
//	mockgen -source=redis.go -destination=../internal/mocks/redis_moc.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIRedis is a mock of IRedis interface.
type MockIRedis struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisMockRecorder
	isgomock struct{}
}

// MockIRedisMockRecorder is the mock recorder for MockIRedis.
type MockIRedisMockRecorder struct {
	mock *MockIRedis
}

// NewMockIRedis creates a new mock instance.
func NewMockIRedis(ctrl *gomock.Controller) *MockIRedis {
	mock := &MockIRedis{ctrl: ctrl}
	mock.recorder = &MockIRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedis) EXPECT() *MockIRedisMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIRedis) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRedisMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRedis)(nil).Delete), key)
}

// ExistsKey mocks base method.
func (m *MockIRedis) ExistsKey(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsKey", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsKey indicates an expected call of ExistsKey.
func (mr *MockIRedisMockRecorder) ExistsKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsKey", reflect.TypeOf((*MockIRedis)(nil).ExistsKey), key)
}

// Get mocks base method.
func (m *MockIRedis) Get(key string, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIRedisMockRecorder) Get(key, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRedis)(nil).Get), key, result)
}

// GetTTL mocks base method.
func (m *MockIRedis) GetTTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTTL indicates an expected call of GetTTL.
func (mr *MockIRedisMockRecorder) GetTTL(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTTL", reflect.TypeOf((*MockIRedis)(nil).GetTTL), key)
}

// Save mocks base method.
func (m *MockIRedis) Save(key string, value any, expirationTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", key, value, expirationTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIRedisMockRecorder) Save(key, value, expirationTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIRedis)(nil).Save), key, value, expirationTime)
}
