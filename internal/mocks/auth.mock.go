// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=../mocks/auth.mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	request "user_service/dto/request"
	response "user_service/dto/response"

	gomock "go.uber.org/mock/gomock"
)

// MockIRegistration is a mock of IRegistration interface.
type MockIRegistration struct {
	ctrl     *gomock.Controller
	recorder *MockIRegistrationMockRecorder
	isgomock struct{}
}

// MockIRegistrationMockRecorder is the mock recorder for MockIRegistration.
type MockIRegistrationMockRecorder struct {
	mock *MockIRegistration
}

// NewMockIRegistration creates a new mock instance.
func NewMockIRegistration(ctrl *gomock.Controller) *MockIRegistration {
	mock := &MockIRegistration{ctrl: ctrl}
	mock.recorder = &MockIRegistrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegistration) EXPECT() *MockIRegistrationMockRecorder {
	return m.recorder
}

// CompleteRegistration mocks base method.
func (m *MockIRegistration) CompleteRegistration(ctx context.Context, arg request.CompleteRegistrationReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRegistration", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteRegistration indicates an expected call of CompleteRegistration.
func (mr *MockIRegistrationMockRecorder) CompleteRegistration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRegistration", reflect.TypeOf((*MockIRegistration)(nil).CompleteRegistration), ctx, arg)
}

// SendRegistrationOtp mocks base method.
func (m *MockIRegistration) SendRegistrationOtp(ctx context.Context, arg request.SendOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegistrationOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegistrationOtp indicates an expected call of SendRegistrationOtp.
func (mr *MockIRegistrationMockRecorder) SendRegistrationOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegistrationOtp", reflect.TypeOf((*MockIRegistration)(nil).SendRegistrationOtp), ctx, arg)
}

// VerifyRegistrationOtp mocks base method.
func (m *MockIRegistration) VerifyRegistrationOtp(ctx context.Context, arg request.VerifyOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRegistrationOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRegistrationOtp indicates an expected call of VerifyRegistrationOtp.
func (mr *MockIRegistrationMockRecorder) VerifyRegistrationOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRegistrationOtp", reflect.TypeOf((*MockIRegistration)(nil).VerifyRegistrationOtp), ctx, arg)
}

// MockILogin is a mock of ILogin interface.
type MockILogin struct {
	ctrl     *gomock.Controller
	recorder *MockILoginMockRecorder
	isgomock struct{}
}

// MockILoginMockRecorder is the mock recorder for MockILogin.
type MockILoginMockRecorder struct {
	mock *MockILogin
}

// NewMockILogin creates a new mock instance.
func NewMockILogin(ctrl *gomock.Controller) *MockILogin {
	mock := &MockILogin{ctrl: ctrl}
	mock.recorder = &MockILoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogin) EXPECT() *MockILoginMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockILogin) Login(ctx context.Context, arg request.LoginReq) (response.LoginRes, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, arg)
	ret0, _ := ret[0].(response.LoginRes)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockILoginMockRecorder) Login(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockILogin)(nil).Login), ctx, arg)
}

// MockIForgotPassword is a mock of IForgotPassword interface.
type MockIForgotPassword struct {
	ctrl     *gomock.Controller
	recorder *MockIForgotPasswordMockRecorder
	isgomock struct{}
}

// MockIForgotPasswordMockRecorder is the mock recorder for MockIForgotPassword.
type MockIForgotPasswordMockRecorder struct {
	mock *MockIForgotPassword
}

// NewMockIForgotPassword creates a new mock instance.
func NewMockIForgotPassword(ctrl *gomock.Controller) *MockIForgotPassword {
	mock := &MockIForgotPassword{ctrl: ctrl}
	mock.recorder = &MockIForgotPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIForgotPassword) EXPECT() *MockIForgotPasswordMockRecorder {
	return m.recorder
}

// CompleteForgotPassword mocks base method.
func (m *MockIForgotPassword) CompleteForgotPassword(ctx context.Context, arg request.CompleteForgotPasswordReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteForgotPassword", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteForgotPassword indicates an expected call of CompleteForgotPassword.
func (mr *MockIForgotPasswordMockRecorder) CompleteForgotPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteForgotPassword", reflect.TypeOf((*MockIForgotPassword)(nil).CompleteForgotPassword), ctx, arg)
}

// SendForgotPasswordOtp mocks base method.
func (m *MockIForgotPassword) SendForgotPasswordOtp(ctx context.Context, arg request.SendOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgotPasswordOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendForgotPasswordOtp indicates an expected call of SendForgotPasswordOtp.
func (mr *MockIForgotPasswordMockRecorder) SendForgotPasswordOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgotPasswordOtp", reflect.TypeOf((*MockIForgotPassword)(nil).SendForgotPasswordOtp), ctx, arg)
}

// VerifyForgotPasswordOtp mocks base method.
func (m *MockIForgotPassword) VerifyForgotPasswordOtp(ctx context.Context, arg request.VerifyOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyForgotPasswordOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyForgotPasswordOtp indicates an expected call of VerifyForgotPasswordOtp.
func (mr *MockIForgotPasswordMockRecorder) VerifyForgotPasswordOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyForgotPasswordOtp", reflect.TypeOf((*MockIForgotPassword)(nil).VerifyForgotPasswordOtp), ctx, arg)
}

// MockILogout is a mock of ILogout interface.
type MockILogout struct {
	ctrl     *gomock.Controller
	recorder *MockILogoutMockRecorder
	isgomock struct{}
}

// MockILogoutMockRecorder is the mock recorder for MockILogout.
type MockILogoutMockRecorder struct {
	mock *MockILogout
}

// NewMockILogout creates a new mock instance.
func NewMockILogout(ctrl *gomock.Controller) *MockILogout {
	mock := &MockILogout{ctrl: ctrl}
	mock.recorder = &MockILogoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogout) EXPECT() *MockILogoutMockRecorder {
	return m.recorder
}

// Logout mocks base method.
func (m *MockILogout) Logout(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockILogoutMockRecorder) Logout(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockILogout)(nil).Logout), ctx, email)
}

// MockIGoogleLogin is a mock of IGoogleLogin interface.
type MockIGoogleLogin struct {
	ctrl     *gomock.Controller
	recorder *MockIGoogleLoginMockRecorder
	isgomock struct{}
}

// MockIGoogleLoginMockRecorder is the mock recorder for MockIGoogleLogin.
type MockIGoogleLoginMockRecorder struct {
	mock *MockIGoogleLogin
}

// NewMockIGoogleLogin creates a new mock instance.
func NewMockIGoogleLogin(ctrl *gomock.Controller) *MockIGoogleLogin {
	mock := &MockIGoogleLogin{ctrl: ctrl}
	mock.recorder = &MockIGoogleLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGoogleLogin) EXPECT() *MockIGoogleLoginMockRecorder {
	return m.recorder
}

// CheckGoogleUserByEmail mocks base method.
func (m *MockIGoogleLogin) CheckGoogleUserByEmail(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGoogleUserByEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGoogleUserByEmail indicates an expected call of CheckGoogleUserByEmail.
func (mr *MockIGoogleLoginMockRecorder) CheckGoogleUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGoogleUserByEmail", reflect.TypeOf((*MockIGoogleLogin)(nil).CheckGoogleUserByEmail), ctx, email)
}

// InsertGoogleUser mocks base method.
func (m *MockIGoogleLogin) InsertGoogleUser(ctx context.Context, arg response.GoogleUserInfo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGoogleUser", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGoogleUser indicates an expected call of InsertGoogleUser.
func (mr *MockIGoogleLoginMockRecorder) InsertGoogleUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGoogleUser", reflect.TypeOf((*MockIGoogleLogin)(nil).InsertGoogleUser), ctx, arg)
}

// ReturnToken mocks base method.
func (m *MockIGoogleLogin) ReturnToken(ctx context.Context, email string) (response.LoginRes, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnToken", ctx, email)
	ret0, _ := ret[0].(response.LoginRes)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReturnToken indicates an expected call of ReturnToken.
func (mr *MockIGoogleLoginMockRecorder) ReturnToken(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnToken", reflect.TypeOf((*MockIGoogleLogin)(nil).ReturnToken), ctx, email)
}

// MockIAuth is a mock of IAuth interface.
type MockIAuth struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthMockRecorder
	isgomock struct{}
}

// MockIAuthMockRecorder is the mock recorder for MockIAuth.
type MockIAuthMockRecorder struct {
	mock *MockIAuth
}

// NewMockIAuth creates a new mock instance.
func NewMockIAuth(ctrl *gomock.Controller) *MockIAuth {
	mock := &MockIAuth{ctrl: ctrl}
	mock.recorder = &MockIAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuth) EXPECT() *MockIAuthMockRecorder {
	return m.recorder
}

// CheckGoogleUserByEmail mocks base method.
func (m *MockIAuth) CheckGoogleUserByEmail(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGoogleUserByEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGoogleUserByEmail indicates an expected call of CheckGoogleUserByEmail.
func (mr *MockIAuthMockRecorder) CheckGoogleUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGoogleUserByEmail", reflect.TypeOf((*MockIAuth)(nil).CheckGoogleUserByEmail), ctx, email)
}

// CompleteForgotPassword mocks base method.
func (m *MockIAuth) CompleteForgotPassword(ctx context.Context, arg request.CompleteForgotPasswordReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteForgotPassword", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteForgotPassword indicates an expected call of CompleteForgotPassword.
func (mr *MockIAuthMockRecorder) CompleteForgotPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteForgotPassword", reflect.TypeOf((*MockIAuth)(nil).CompleteForgotPassword), ctx, arg)
}

// CompleteRegistration mocks base method.
func (m *MockIAuth) CompleteRegistration(ctx context.Context, arg request.CompleteRegistrationReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRegistration", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteRegistration indicates an expected call of CompleteRegistration.
func (mr *MockIAuthMockRecorder) CompleteRegistration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRegistration", reflect.TypeOf((*MockIAuth)(nil).CompleteRegistration), ctx, arg)
}

// InsertGoogleUser mocks base method.
func (m *MockIAuth) InsertGoogleUser(ctx context.Context, arg response.GoogleUserInfo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGoogleUser", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGoogleUser indicates an expected call of InsertGoogleUser.
func (mr *MockIAuthMockRecorder) InsertGoogleUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGoogleUser", reflect.TypeOf((*MockIAuth)(nil).InsertGoogleUser), ctx, arg)
}

// Login mocks base method.
func (m *MockIAuth) Login(ctx context.Context, arg request.LoginReq) (response.LoginRes, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, arg)
	ret0, _ := ret[0].(response.LoginRes)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockIAuthMockRecorder) Login(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuth)(nil).Login), ctx, arg)
}

// Logout mocks base method.
func (m *MockIAuth) Logout(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockIAuthMockRecorder) Logout(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIAuth)(nil).Logout), ctx, email)
}

// ReturnToken mocks base method.
func (m *MockIAuth) ReturnToken(ctx context.Context, email string) (response.LoginRes, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnToken", ctx, email)
	ret0, _ := ret[0].(response.LoginRes)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReturnToken indicates an expected call of ReturnToken.
func (mr *MockIAuthMockRecorder) ReturnToken(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnToken", reflect.TypeOf((*MockIAuth)(nil).ReturnToken), ctx, email)
}

// SendForgotPasswordOtp mocks base method.
func (m *MockIAuth) SendForgotPasswordOtp(ctx context.Context, arg request.SendOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgotPasswordOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendForgotPasswordOtp indicates an expected call of SendForgotPasswordOtp.
func (mr *MockIAuthMockRecorder) SendForgotPasswordOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgotPasswordOtp", reflect.TypeOf((*MockIAuth)(nil).SendForgotPasswordOtp), ctx, arg)
}

// SendRegistrationOtp mocks base method.
func (m *MockIAuth) SendRegistrationOtp(ctx context.Context, arg request.SendOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegistrationOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegistrationOtp indicates an expected call of SendRegistrationOtp.
func (mr *MockIAuthMockRecorder) SendRegistrationOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegistrationOtp", reflect.TypeOf((*MockIAuth)(nil).SendRegistrationOtp), ctx, arg)
}

// VerifyForgotPasswordOtp mocks base method.
func (m *MockIAuth) VerifyForgotPasswordOtp(ctx context.Context, arg request.VerifyOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyForgotPasswordOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyForgotPasswordOtp indicates an expected call of VerifyForgotPasswordOtp.
func (mr *MockIAuthMockRecorder) VerifyForgotPasswordOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyForgotPasswordOtp", reflect.TypeOf((*MockIAuth)(nil).VerifyForgotPasswordOtp), ctx, arg)
}

// VerifyRegistrationOtp mocks base method.
func (m *MockIAuth) VerifyRegistrationOtp(ctx context.Context, arg request.VerifyOtpReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRegistrationOtp", ctx, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRegistrationOtp indicates an expected call of VerifyRegistrationOtp.
func (mr *MockIAuthMockRecorder) VerifyRegistrationOtp(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRegistrationOtp", reflect.TypeOf((*MockIAuth)(nil).VerifyRegistrationOtp), ctx, arg)
}
