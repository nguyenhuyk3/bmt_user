// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injectors

import (
	"user_service/db/sqlc"
	"user_service/internal/controllers"
	"user_service/internal/implementations"
	"user_service/internal/injectors/provider"
	"user_service/internal/message_broker"
	"user_service/internal/middlewares"
	"user_service/utils/redis"
	"user_service/utils/token/jwt"
)

// Injectors from auth.controller.wire.go:

func InitAuthController() (*controllers.AuthController, error) {
	pool := provider.ProvidePgxPool()
	iStore := sqlc.NewStore(pool)
	string2 := provider.ProvideSecretKey()
	iMaker, err := jwt.NewJWTMaker(string2)
	if err != nil {
		return nil, err
	}
	iRedis := redis.NewRedisClient()
	iMessageBroker := messagebroker.NewKafkaMessageBroker()
	iAuth := implementations.NewAuthService(iStore, iMaker, iRedis, iMessageBroker)
	config := provider.ProvideGoogleOAuthConfig()
	authController := controllers.NewAuthController(iAuth, config)
	return authController, nil
}

// Injectors from auth.middleware.wire.go:

func InitAuthMiddleware() (*middlewares.AuthMiddleware, error) {
	string2 := provider.ProvideSecretKey()
	iMaker, err := jwt.NewJWTMaker(string2)
	if err != nil {
		return nil, err
	}
	iRedis := redis.NewRedisClient()
	authMiddleware := middlewares.NewAuthMiddleware(iMaker, iRedis)
	return authMiddleware, nil
}

// Injectors from customer.controller.wire.go:

func InitCustomerController() (*controllers.CustomerController, error) {
	pool := provider.ProvidePgxPool()
	iStore := sqlc.NewStore(pool)
	iCustomer := implementations.NewCustomerService(iStore)
	customerController := controllers.NewCustomerController(iCustomer)
	return customerController, nil
}
